#!/usr/bin/env python3
"""
Test basique pour v√©rifier que l'ontologie fonctionne
"""

import sys
import os

# Ajouter le dossier sophia au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from sophia.models.lcm_core import SimpleLCM
from sophia.core.ontology import SimpleOntology, Concept
from sophia.core.concept_types import ConceptType, RelationType
from sophia.training.trainer import SimpleLCMTrainer, OntologyAwareLCMTrainer
# Ajoute ces imports
from sophia.storage.serializer import LCMSerializer
from sophia.storage.session import TrainingSession
from sophia.llm.llama_interface import OllamaLLaMAInterface


def test_ontology_basic():
    print("=== Test Ontologie SophIA ===")
    
    # Test cr√©ation ontologie
    print("1. Cr√©ation de l'ontologie...")
    ontology = SimpleOntology()
    print(f"   ‚úì Concepts charg√©s: {len(ontology.concepts)}")
    
    # Test stats
    print("2. Statistiques de base...")
    stats = ontology.get_stats()
    print(f"   ‚úì Total concepts: {stats['total_concepts']}")
    print(f"   ‚úì Total relations: {stats['total_relations']}")
    print(f"   ‚úì Types de concepts: {list(stats['concepts_by_type'].keys())}")
    
    # Test ajout concept
    print("3. Test ajout concept...")
    nouveau_concept = ontology.add_concept("TEST_CONCEPT", ConceptType.LEARNED_CONCEPT)
    print(f"   ‚úì Concept ajout√©: {nouveau_concept.name}")
    print(f"   ‚úì Total apr√®s ajout: {len(ontology.concepts)}")
    
    # Test ajout relation
    print("4. Test ajout relation...")
    success = ontology.add_relation("TEST_CONCEPT", RelationType.IS_A, "CONCEPT")
    print(f"   ‚úì Relation ajout√©e: {success}")
    
    # Test recherche
    print("5. Test recherche concept...")
    concept_trouve = ontology.get_concept("V√âRIT√â")
    if concept_trouve:
        print(f"   ‚úì Concept trouv√©: {concept_trouve.name} ({concept_trouve.concept_type.value})")
        print(f"   ‚úì Relations: {concept_trouve.relations}")
    
    # Test validation
    print("6. Test validation coh√©rence...")
    issues = ontology.validate_consistency()
    print(f"   ‚úì Contradictions: {len(issues['contradictions'])}")
    print(f"   ‚úì Concepts orphelins: {len(issues['orphaned_concepts'])}")
    
    print("\nüéâ Tous les tests sont pass√©s !")
    return True

# Ajoute cette fonction de test
def test_lcm_basic():
    print("\n=== Test LCM de base ===")
    
    # Cr√©ation ontologie et LCM
    ontology = SimpleOntology()
    lcm = SimpleLCM(ontology)
    
    print(f"1. LCM cr√©√© avec {len(ontology.concepts)} concepts")
    
    # Test ajout transitions manuelles
    lcm.add_transition("V√âRIT√â", "CONNAISSANCE", 0.8)
    lcm.add_transition("CONNAISSANCE", "√äTRE", 0.7)
    lcm.add_transition("√äTRE", "EXISTENCE", 0.9)
    
    print("2. Transitions ajout√©es")
    print(f"   Total transitions: {len(lcm.transitions)}")
    
    # Test g√©n√©ration s√©quence
    sequence = lcm.generate_sequence("V√âRIT√â", length=4)
    print(f"3. S√©quence g√©n√©r√©e: {[c.name for c in sequence]}")
    
    # Test statistiques
    stats = lcm.get_model_stats()
    print(f"4. Stats LCM: {stats}")
    
    return True

def test_training_system():
    print("\n=== Test Syst√®me d'entra√Ænement ===")
    
    # Setup
    ontology = SimpleOntology()
    lcm = SimpleLCM(ontology)
    trainer = OntologyAwareLCMTrainer(lcm, ontology)
    
    # Cr√©ation de s√©quences d'entra√Ænement philosophiques
    training_sequences = [
        # S√©quences √©pist√©mologiques
        [ontology.get_concept("DOUTE"), ontology.get_concept("V√âRIT√â"), ontology.get_concept("CONNAISSANCE")],
        [ontology.get_concept("V√âRIT√â"), ontology.get_concept("CONNAISSANCE"), ontology.get_concept("√äTRE")],
        [ontology.get_concept("CONNAISSANCE"), ontology.get_concept("√äTRE"), ontology.get_concept("EXISTENCE")],
        
        # S√©quences √©thiques
        [ontology.get_concept("BIEN"), ontology.get_concept("VERTU"), ontology.get_concept("JUSTICE")],
        [ontology.get_concept("JUSTICE"), ontology.get_concept("BIEN"), ontology.get_concept("VERTU")],
        [ontology.get_concept("LIBERT√â"), ontology.get_concept("RESPONSABILIT√â"), ontology.get_concept("MORALE")],
        
        # S√©quences logiques
        [ontology.get_concept("ARGUMENT"), ontology.get_concept("PR√âMISSE"), ontology.get_concept("CONCLUSION")],
        [ontology.get_concept("PR√âMISSE"), ontology.get_concept("VALIDIT√â"), ontology.get_concept("CONCLUSION")],
    ]
    
    # Filtrer les concepts None
    training_sequences = [[c for c in seq if c is not None] for seq in training_sequences]
    training_sequences = [seq for seq in training_sequences if len(seq) >= 2]
    
    print(f"1. S√©quences d'entra√Ænement pr√©par√©es: {len(training_sequences)}")
    
    # Entra√Ænement
    print("2. D√©but de l'entra√Ænement...")
    training_history = trainer.train(training_sequences, epochs=5, verbose=True)
    
    print(f"3. Entra√Ænement termin√©: {len(training_history)} √©poques")
    
    # Test g√©n√©ration apr√®s entra√Ænement
    print("4. Test g√©n√©ration apr√®s entra√Ænement:")
    for start_concept in ["V√âRIT√â", "BIEN", "ARGUMENT"]:
        if ontology.get_concept(start_concept):
            sequence = lcm.generate_sequence(start_concept, length=4)
            print(f"   {start_concept}: {[c.name for c in sequence]}")
    
    # R√©sum√© de l'entra√Ænement
    summary = trainer.get_training_summary()
    print(f"5. R√©sum√©: Loss finale={summary['final_loss']:.4f}, "
          f"Coh√©rence={summary['final_coherence']:.3f}")
    
    return True

def test_save_load_system():
    print("\n=== Test Syst√®me de sauvegarde ===")
    
    # Setup mod√®le entra√Æn√©
    ontology = SimpleOntology()
    lcm = SimpleLCM(ontology)
    trainer = OntologyAwareLCMTrainer(lcm, ontology)
    
    # Entra√Ænement rapide
    training_sequences = [
        [ontology.get_concept("V√âRIT√â"), ontology.get_concept("CONNAISSANCE"), ontology.get_concept("√äTRE")],
        [ontology.get_concept("BIEN"), ontology.get_concept("VERTU"), ontology.get_concept("JUSTICE")],
    ]
    training_sequences = [[c for c in seq if c is not None] for seq in training_sequences]
    
    trainer.train(training_sequences, epochs=3, verbose=False)
    
    print("1. Mod√®le entra√Æn√© pr√©par√©")
    
    # Test session d'entra√Ænement
    session = TrainingSession("test_session")
    
    # Sauvegarde checkpoints
    checkpoint1 = session.save_checkpoint(lcm, ontology, trainer, epoch=1, 
                                         metrics={'loss': 0.5, 'coherence': 0.8})
    checkpoint2 = session.save_checkpoint(lcm, ontology, trainer, epoch=2, 
                                         metrics={'loss': 0.3, 'coherence': 0.9})
    
    print(f"2. Checkpoints sauvegard√©s: {len(session.list_checkpoints())}")
    
    # Sauvegarde mod√®le final
    final_path = session.save_final_model(lcm, ontology, trainer, 
                                         final_metrics={'final_loss': 0.1})
    
    print("3. Mod√®le final sauvegard√©")
    
    # Test chargement
    loaded_model, loaded_ontology, loaded_trainer, metadata = session.load_checkpoint(1)
    
    print(f"4. Checkpoint charg√© - Concepts: {len(loaded_ontology.concepts)}, "
          f"Transitions: {len(loaded_model.transitions)}")
    
    # Test g√©n√©ration avec mod√®le charg√©
    if loaded_ontology.get_concept("V√âRIT√â"):
        sequence = loaded_model.generate_sequence("V√âRIT√â", length=3)
        print(f"5. G√©n√©ration avec mod√®le charg√©: {[c.name for c in sequence]}")
    
    # R√©sum√© session
    summary = session.get_session_summary()
    print(f"6. R√©sum√© session: {summary['checkpoints_count']} checkpoints, "
          f"{summary['total_size_mb']:.2f} MB")
    
    return True

def test_ollama_llama():
    print("\n=== Test Ollama + LLaMA 3.1 ===")
    
    # Test avec ton setup Ollama
    print("1. Connexion √† Ollama...")
    llama = OllamaLLaMAInterface(model_name="llama3.1:latest")
    
    # V√©rification disponibilit√©
    model_info = llama.get_model_info()
    print(f"   Status: {model_info['status']}")
    print(f"   Mod√®le: {model_info['model_name']}")
    
    if model_info['status'] != 'ready':
        print("‚ö†Ô∏è Ollama ou LLaMA 3.1 non disponible, v√©rifiez qu'Ollama tourne")
        return False
    
    # Test g√©n√©ration philosophique
    print("2. Test g√©n√©ration philosophique...")
    prompt = "Selon toi, quelle est la relation entre v√©rit√© et connaissance ?"
    response = llama.generate_text(prompt, max_tokens=150)
    print(f"   Prompt: {prompt}")
    print(f"   LLaMA 3.1: {response}")
    
    # Test extraction conceptuelle
    print("3. Test extraction avec LLaMA 3.1...")
    ontology = SimpleOntology()
    
    philosophical_text = """
    La v√©rit√© platonicienne transcende le sensible. Cette conception implique que la 
    connaissance authentique ne peut √™tre atteinte que par la raison, car l'√™tre 
    v√©ritable r√©side dans le monde intelligible. La justice, en tant qu'id√©e, 
    participe de cette r√©alit√© sup√©rieure.
    """
    
    extraction = llama.extract_concepts_from_text(philosophical_text, list(ontology.concepts.keys()))
    print(f"   Concepts extraits: {extraction['concepts_detected']}")
    print(f"   Relations d√©tect√©es: {len(extraction['relations_implied'])}")
    print(f"   Confiance: {extraction['confidence']}")
    
    # Test g√©n√©ration contrainte
    print("4. Test g√©n√©ration avec contraintes...")
    constraints = {
        'required_concepts': ['V√âRIT√â', 'CONNAISSANCE', '√äTRE'],
        'forbidden_concepts': ['MAL'],
        'tone': 'acad√©mique et pr√©cis'
    }
    
    constrained_prompt = "Explique la philosophie de Platon en 100 mots"
    result = llama.generate_with_constraints(constrained_prompt, constraints)
    
    print(f"   Contraintes respect√©es: {result['constraints_satisfied']}")
    print(f"   Tentatives: {result['attempt']}")
    print(f"   R√©ponse: {result['text'][:200]}...")
    
    return True


if __name__ == "__main__":
    test_ontology_basic()
    test_lcm_basic()
    test_training_system()
    test_save_load_system()
    test_ollama_llama()